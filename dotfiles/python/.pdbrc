# Format: alias [alias name] [command]
# To use arguments: $1, $2, etc. represent the first, second, etc. arguments

alias sh from ptpython.repl import embed, run_config; embed(history_filename="/tmp/pdb_history", configure=run_config, locals=locals(), globals=globals())

alias dpp __import__("devtools").debug(%*)

alias p from pathlib import Path;from rich.console import Console;from rich.theme import Theme;Console(theme=Theme.read(Path("~/.config/rich/rich.ini").expanduser().as_posix())).print(%*)

alias pp from pathlib import Path;from rich.console import Console;from rich.theme import Theme;Console(theme=Theme.read(Path("~/.config/rich/rich.ini").expanduser().as_posix())).print(%*)
alias pi from pathlib import Path;from rich.console import Console;from rich.theme import Theme;from rich import inspect;inspect(%*, console=Console(theme=Theme.read(Path("~/.config/rich/rich.ini").expanduser().as_posix())))
alias piv from pathlib import Path;from rich.console import Console;from rich.theme import Theme;from rich import inspect;inspect(%*, private=True, methods=True, console=Console(theme=Theme.read(Path("~/.config/rich/rich.ini").expanduser().as_posix())))
alias pivv from pathlib import Path;from rich.console import Console;from rich.theme import Theme;from rich import inspect;inspect(%*, private=True, methods=True, dunder=True, all=True, console=Console(theme=Theme.read(Path("~/.config/rich/rich.ini").expanduser().as_posix())))

alias sql print(__import__("sqlparse").format(str(getattr(%*, "statement", %*).compile(dialect=__import__("sqlalchemy").dialects.postgresql.dialect(), compile_kwargs={"literal_binds": True})), reindent=True, keyword_case="upper"))
alias sqlr print(__import__("sqlparse").format(str(getattr(%*, "statement", %*).compile(dialect=__import__("sqlalchemy").dialects.postgresql.dialect())), reindent=True, keyword_case="upper"))
alias sqlinline from zefire.debug import render_query;print(__import__("sqlparse").format(render_query(%*), reindent=True, keyword_case="upper"))

alias t type(%*)

alias osexit __import__("os")._exit(0)

alias timeit from fohn import timer; timer.timeit(%*)

alias loginfo from fohn import logs; logs.setup_structlog(log_level="info")
alias logdebug from fohn import logs; logs.setup_structlog(log_level="debug")

alias horizon print(f"{%*.start.tz_convert('CET')} -> {%*.end.tz_convert('CET')}")

alias dump import json; data = %2; label = '%1'; data = data.model_dump(mode="json") if hasattr(data, "model_dump") else data; dumppath = f"/tmp/dump-pdb-{label}.json"; json.dump(data, open(dumppath, "w"), indent=2, ensure_ascii=False); print(f"Dumped at {dumppath}")
